#!/bin/bash

mix_test() {
  log_info "Running: mix test $1"
  output=`mix test $1 --color`
  result=$?
  echo "$output"
  if [[ $result != 0 ]]; then
    log_failure "OOOPPPPSIE - Somewhat predictably, you've broken something"
  else
    log_success "Congratulations, you haven't broken anything... yet..."
  fi
}

log_info() {
  echo -e "\e[35m$1\e[39m"
}

log_debug() {
  if [[ $DEBUG ]]; then
    echo -e "\e[33m$1\e[39m"
  fi
}

log_failure() {
  echo -e "\e[31m$1\e[39m"
}

log_success() {
  echo -e "\e[32m$1\e[39m"
}

test_file_changed() {
  if [ "$mix_path" == "" ]; then
    log_failure "Cannot find a mix project for: $path$file"
  else
    log_debug "You changed the test file: $path$file so I'm running those tests for you"
    mix_test "$test_path"
  fi
}

elm_make() {
  log_info "Running 'elm make $1'"
  make_dir=$(find_elm_json $1)
  pushd $make_dir > /dev/null
  elm make $1
  popd > /dev/null
}

find_main() {
  find_file_in_parent $1 "Main.elm"
}

find_elm_json() {
  main_dir=$(dirname $1)
  json_dir=$(find_file_in_parent $main_dir "elm.json")
  echo $(dirname $json_dir)
}

find_file_in_parent() {
  currentDir=$(dirname "$1")
  current="$(readlink -f $currentDir)"
  target="$2"
  while [[ $current != / ]]; do
    found=$(find "$current" -maxdepth 1 -mindepth 1 -name "$target")

    if [ -n "$found" ]; then
        echo $current"/"$target
        return 0
    fi
    current="$(readlink -f "$current"/..)"
  done
  return 1
}


file_changed() {
  if [ -f $test_path ]; then
    log_debug "You changed the file: $path$file so I'll run the tests for that"
    mix_test "$test_path"
  else
    log_failure "Uh-oh, You don't have tests for this do you?"
  fi
}

any_file_changed() {
  test_path_without_line=${test_path%:*}
  if [ -f $test_path_without_line ]; then
    log_debug "Running fixed tests: $test_path"
    mix_test "$test_path"
  else
    log_failure "Uh-oh, that path you gave me doesnt exist ($test_path)"
  fi
}

mix_path() {
  [[ $1 =~ (^.*/)((test|lib)/.*$) ]]
  mix_path=${BASH_REMATCH[1]}
  file_path=${BASH_REMATCH[2]}
  test_path=${file_path/#lib/test}
  test_path=${test_path/%.ex/_test.exs}
}


clear_screen() {
  tput reset
}

watch() {
  clear_screen
  if [ $FIXED_FILE ]; then
    log_info "I'll run this for you now so you can see how broken it is before you start hacking about"
    mix_test "$test_path"
  else
    log_info "I'm going to watch you work... in a creepy way"
  fi

  fswatch --recursive -m "poll_monitor" -e ".swp" -e ".swo" . |
    while read path event ; do
      if [[ "$path" == *.exs || "$path" == *.ex ]]; then
        if [ $FIXED_FILE ]; then
          clear_screen
          any_file_changed
        else
          mix_path "$path"
          cd $mix_path
          clear_screen
          if [[ "$path" == *_test.exs ]]; then test_file_changed
          elif [[ "$path" == *.ex ]]; then file_changed; fi
          log_info "I'm watching you..."
          cd - > /dev/null
        fi
      elif [[ $path == *.elm ]]; then
        clear_screen
        if [ $FIXED_FILE ]; then
          elm_make $test_path
        else
          echo "LOOKING FOR MAIN"
          main=$(find_main $path)
          if [ $? -eq 0 ]; then
            elm_make $main
          else
            log_info "No Main.elm found for $path"
          fi
        fi
      fi
      done
    }


  POSITIONAL=()
  while [[ $# -gt 0 ]]
  do
    key="$1"

    case $key in
      -d|--debug)
        DEBUG=true
        shift
        ;;
      -t|--test)
        TEST=true
        shift
        ;;
      *)    # any option
        FIXED_FILE=true
        test_path=("$1")
        shift
        ;;
    esac
  done

  if ! [[ $TEST ]]; then
    watch
  fi
