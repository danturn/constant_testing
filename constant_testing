#!/bin/bash

mix_test() {
  run_command "mix test $1 --color" "Congratulations, you haven't broken anything... yet..." "OOOPPPPSIE - Somewhat predictably, you've broken something" true
}

log_info() {
  echo -e "\e[35m$1\e[39m"
}

log_debug() {
  if [[ $DEBUG ]]; then
    echo -e "\e[33m$1\e[39m"
  fi
}

log_failure() {
  echo -e "\e[31m$1\e[39m"
}

log_success() {
  echo -e "\e[32m$1\e[39m"
}

test_file_changed() {
  if [ "$mix_path" == "" ]; then
    log_failure "Cannot find a mix project for: $path$file"
  else
    log_debug "You changed the test file: $path$file so I'm running those tests for you"
    mix_test "$test_path"
  fi
}

elm_make() {
  run_command "elm_make_from_correct_dir $1" "Congrats, elm actually compiles... for now" "Turns out your elm is totally broken... what a surprise.... to nobody" true "elm make $1"
}

elm_make_from_correct_dir() {
  make_dir=$(find_elm_json $1)
  pushd $make_dir > /dev/null
  path=$(find_fixed_elm_main_path $1)
  elm make "$path"
  result=$?
  popd > /dev/null
  return $result
}

find_fixed_elm_main_path() {
  current_dir="$(pwd)"
  main_file_path=$1

  str="Learn to Split a String in Bash Scripting"

  IFS='/'
  current_dir_heirarchy=()
  read -ra ADDR <<< "$current_dir"
  for i in "${ADDR[@]}"; do
    current_dir_heirarchy+=("$i")
  done

  main_file_dir_heirarchy=()
  read -ra ADDR <<< "$main_file_path"
  for i in "${ADDR[@]}"; do
      main_file_dir_heirarchy+=("$i")
  done

  looking_index=0

  for i in "${current_dir_heirarchy[@]}"; do
    if [[ "$i" = "${main_file_dir_heirarchy[$looking_index]}" ]]; then
      looking_index=$(($looking_index + 1))
      first_dir_after="$i"
    elif (( $looking_index > 0 )); then
      break;
    fi
  done

  path=""
  start_appending=false
  for i in "${main_file_dir_heirarchy[@]}"; do
    if [[ $start_appending = false ]]; then
      if [[ $i = $first_dir_after ]]; then
        start_appending=true
      fi
    else
      path="${path}$i/"
    fi
  done

  path="${path%?}"

  echo "$path"
}

elm_test_command() {
  echo "elm-test"
}

elm_test() {
  elm_json_path=$(find_first_elm_json)
  elm_json_dir=$(dirname $elm_json_path)
  pushd $elm_json_dir > /dev/null
  run_command $(elm_test_command) "Your elm tests passed! First time for everything..." "Your elm is riddled with bugs... (at least you have tests(s) though)..." true
  popd > /dev/null
}

find_main() {
  find_file_in_parent $1 "Main.elm"
}

find_elm_json() {
  main_dir=$(dirname $1)
  json_dir=$(find_file_in_parent $main_dir "elm.json")
  echo $(dirname $json_dir)
}

find_first_elm_json() {
  echo `find -name elm.json ! -path */elm-stuff/* -print -quit`
}

real_readlink() {
  python3 -c "import os,sys;print(os.path.realpath(\"$1\"))"
}

find_file_in_parent() {
  currentDir=$(dirname "$1")
  current="$(real_readlink $currentDir)"
  target="$2"
  while [[ $current != / ]]; do
    found=$(find "$current" -maxdepth 1 -mindepth 1 -name "$target")

    if [ -n "$found" ]; then
        echo $current"/"$target
        return 0
    fi
    current="$(real_readlink "$current"/..)"
  done
  return 1
}


file_changed() {
  if [ -f $test_path ]; then
    log_debug "You changed the file: $path$file so I'll run the tests for that"
    mix_test "$test_path"
  else
    log_failure "Uh-oh, You don't have tests for this do you?"
  fi
}

any_file_changed() {
  test_path_without_line=${test_path%:*}
  if [ -f $test_path_without_line ]; then
    log_debug "Running fixed tests: $test_path"
    mix_test "$test_path"
  else
    log_failure "Uh-oh, that path you gave me doesnt exist ($test_path)"
  fi
}

mix_path() {
  [[ $1 =~ (^.*/)((test|lib)/.*$) ]]
  mix_path=${BASH_REMATCH[1]}
  file_path=${BASH_REMATCH[2]}
  test_path=${file_path/#lib/test}
  test_path=${test_path/%.ex/_test.exs}
}


clear_screen() {
  tput reset
}

run_command() {
  cmd="$1"
  success_message="$2"
  failure_message="$3"
  echo_output=$4
  log_cmd=$5
  if [[ $log_cmd = "" ]]; then
    log_info "Running: $cmd"
  else
    log_info "Running: $log_cmd"
  fi
  output=`$cmd`
  result=$?
  if [[ $echo_output = true ]]; then
    echo "$output"
  fi
  if [[ $result != 0 ]]; then
    log_failure "$failure_message"
  else
    log_success "$success_message"
  fi
}

watch() {
  clear_screen
  if [ $ELM_TEST ]; then
    elm_test
  elif [ $FIXED_FILE ]; then
    if [[ "$test_path" = *.exs* ]]; then
      log_info "I'll run this for you now so you can see how broken it is before you start hacking about"
      mix_test "$test_path"
    elif [[ "$test_path" = *Main.elm ]]; then
      log_info "I'll run this for you now so you can see how broken it is before you start hacking about"
      elm_make $test_path
    else
      log_failure "I don't understand the arguement you gave me. Try again buddy..."
    fi
  else
    log_info "I'm going to watch you work... in a creepy way"
  fi

  fswatch --recursive -m "poll_monitor" -e ".swp" -e ".swo" . |
    while read path event ; do
      if [[ "$path" == *.exs || "$path" == *.ex ]]; then
        if [ $FIXED_FILE ]; then
          clear_screen
          any_file_changed
        else
          mix_path "$path"
          cd $mix_path
          clear_screen
          if [[ "$path" == *_test.exs ]]; then test_file_changed
          elif [[ "$path" == *.ex ]]; then file_changed; fi
          log_info "I'm watching you..."
          cd - > /dev/null
        fi
      elif [[ $path == *.elm && $ELM_TEST && $path != *"elm-stuff"* ]]; then
        clear_screen
        elm_test
      elif [[ $path == *.elm && $path != *"elm-stuff"* ]]; then
        clear_screen
        if [ $FIXED_FILE ]; then
          elm_make $test_path
        else
          main=$(find_main $path)
          if [ $? -eq 0 ]; then
            elm_make $main
          else
            log_info "No Main.elm found for $path"
          fi
        fi
      fi
      done
    }


  POSITIONAL=()
  while [[ $# -gt 0 ]]
  do
    key="$1"

    case $key in
      -d|--debug)
        DEBUG=true
        shift
        ;;
      -et|--elm-test)
        ELM_TEST=true
        shift
        ;;
      -t|--test)
        TEST=true
        shift
        ;;
      *)    # any option
        FIXED_FILE=true
        test_path=("$1")
        shift
        ;;
    esac
  done

  if ! [[ $TEST ]]; then
    watch
  fi
