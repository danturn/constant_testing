#!/bin/bash

mix_test() {
  run_command "mix test $1 --color" "Congratulations, you haven't broken anything... yet..." "OOOPPPPSIE - Somewhat predictably, you've broken something" true
}


log_info() {
  echo -e "$(tput setaf 5)$1$(tput init)"
}

log_debug() {
  if [[ $DEBUG ]]; then
    echo -e "$(tput setaf 3)$1$(tput init)"
  fi
}

log_failure() {
  echo -e "$(tput setaf 1)$1$(tput init)"
}

log_success() {
  echo -e "$(tput setaf 2)$1$(tput init)"
}

test_file_changed() {
  if [ "$mix_path" == "" ]; then
    log_failure "Cannot find a mix project for: $path$file"
  else
    log_debug "You changed the test file: $path$file so I'm running those tests for you"
    mix_test "$test_path"
  fi
}


real_readlink() {
  python3 -c "import os,sys;print(os.path.realpath(\"$1\"))"
}

find_file_in_parent() {
  currentDir=$(dirname "$1")
  current="$(real_readlink $currentDir)"
  target="$2"
  while [[ $current != / ]]; do
    found=$(find "$current" -maxdepth 1 -mindepth 1 -name "$target")

    if [ -n "$found" ]; then
      echo $current"/"$target
      return 0
    fi
    current="$(real_readlink "$current"/..)"
  done
  return 1
}


file_changed() {
  if [ -f $test_path ]; then
    log_debug "You changed the file: $path$file so I'll run the tests for that"
    mix_test "$test_path"
  else
    log_failure "Uh-oh, You don't have tests for this do you?"
  fi
}

any_file_changed() {
  test_path_without_line=${test_path%:*}
  if [ -f $test_path_without_line ]; then
    log_debug "Running fixed tests: $test_path"
    mix_test "$test_path"
  else
    log_failure "Uh-oh, that path you gave me doesnt exist ($test_path)"
  fi
}

mix_path() {
  [[ $1 =~ (^.*/)((test|lib)/.*$) ]]
  mix_path=${BASH_REMATCH[1]}
  file_path=${BASH_REMATCH[2]}
  test_path=${file_path/#lib/test}
  test_path=${test_path/%.ex/_test.exs}
}


clear_screen() {
  tput reset
}

run_command() {
  cmd="$1"
  success_message="$2"
  failure_message="$3"
  echo_output=$4
  log_cmd=$5
  if [[ $log_cmd = "" ]]; then
    log_info "Running: $cmd"
  else
    log_info "Running: $log_cmd"
  fi
  output=`$cmd`
  result=$?
  last_run_cmd=$cmd
  if [[ $echo_output = true ]]; then
    echo "$output"
  fi
  if [[ $result != 0 ]]; then
    log_failure "$failure_message"
  else
    log_success "$success_message"
  fi
}

run_last_cmd() {
  log_info "I don't know what to do with the file you just saved, so I'll just run the last thing I did again..."
  run_command "$last_run_cmd" "Looks like everything is ok?" "It totally wrecked..." true
}

watch() {
  clear_screen
  if [ $FIXED_FILE ]; then
    if [[ "$test_path" = *.exs* ]]; then
      log_info "I'll run this for you now so you can see how broken it is before you start hacking about"
      mix_test "$test_path"
    else
      log_failure "I don't understand the arguement you gave me. Try again buddy..."
    fi
  else
    log_info "I'm going to watch you work... in a creepy way"
  fi

  fswatch $PWD |
    while read path event ; do
      if [[ "$path" == *.exs || "$path" == *.ex ]]; then
        if [ $FIXED_FILE ]; then
          clear_screen
          any_file_changed
        else
          mix_path "$path"
          cd $mix_path
          clear_screen
          if [[ "$path" == *_test.exs ]]; then test_file_changed
          elif [[ "$path" == *.ex ]]; then file_changed; fi
          log_info "I'm watching you..."
          cd - > /dev/null
        fi
      fi
    done
}


POSITIONAL=()
while [[ $# -gt 0 ]]
do
  last_run_cmd=":"
  key="$1"

  case $key in
    -d|--debug)
      DEBUG=true
      shift
      ;;
    -t|--test)
      TEST=true
      shift
      ;;
    *)    # any option
      FIXED_FILE=true
      test_path=("$1")
      shift
      ;;
  esac
done

if ! [[ $TEST ]]; then
  watch
fi
